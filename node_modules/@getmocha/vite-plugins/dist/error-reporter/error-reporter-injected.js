function postMessageToParent(message) {
    if (window.parent) {
        window.parent.postMessage(message, '*');
    }
}
// Report any logs, errors, etc to the parent mocha app context to include in
// the bottom panel.
for (const method of ['log', 'debug', 'info', 'error', 'warn']) {
    const originalFn = console[method];
    console[method] = function (...args) {
        postMessageToParent({ type: 'console', method, args: args.map((a) => `${a}`) });
        return originalFn(...args);
    };
}
// Report any thrown errors / promise rejections so they show up in the logs
window.addEventListener('error', (e) => {
    postMessageToParent({ type: 'error', stack: e.error.stack });
});
window.addEventListener('unhandledrejection', (e) => {
    postMessageToParent({ type: 'unhandledrejection', reason: e.reason });
});
// Report Vite HMR events to parent.
// Full event list: https://vite.dev/guide/api-hmr.html
if (import.meta.hot) {
    import.meta.hot.on('vite:beforeUpdate', (data) => {
        postMessageToParent({ type: 'vite:hmr:beforeUpdate', data });
    });
    import.meta.hot.on('vite:afterUpdate', (data) => {
        postMessageToParent({ type: 'vite:hmr:afterUpdate', data });
    });
    import.meta.hot.on('vite:beforeFullReload', () => {
        postMessageToParent({ type: 'vite:hmr:beforeFullReload' });
    });
    import.meta.hot.on('vite:beforePrune', (data) => {
        postMessageToParent({ type: 'vite:hmr:beforePrune', data });
    });
    import.meta.hot.on('vite:invalidate', (data) => {
        postMessageToParent({ type: 'vite:hmr:invalidate', data });
    });
    import.meta.hot.on('vite:error', (data) => {
        postMessageToParent({ type: 'vite:hmr:error', data });
    });
    import.meta.hot.on('vite:ws:disconnect', () => {
        postMessageToParent({ type: 'vite:hmr:ws:disconnect' });
    });
    import.meta.hot.on('vite:ws:connect', () => {
        postMessageToParent({ type: 'vite:hmr:ws:connect' });
    });
}
if (MOCHA_ENV.DEBUG_LOGS === 'true') {
    console.log('[mocha-error-reporter] installed!');
}
export {};
