const HTMLElement = globalThis.HTMLElement ?? class {
};
class ErrorOverlay extends HTMLElement {
    constructor(error) {
        super();
        this.postMessageToParent({ type: 'vite:error-overlay:opened', error });
    }
    close() {
        this.postMessageToParent({ type: 'vite:error-overlay:closed' });
    }
    postMessageToParent(message) {
        if (window.parent) {
            window.parent.postMessage(message, '*');
        }
    }
}
export function errorOverlay() {
    return {
        name: 'mocha-error-overlay',
        enforce: 'post',
        // See: https://vite.dev/guide/using-plugins#conditional-application
        apply: 'serve',
        transform(code, id) {
            if (!id.includes('vite/dist/client/client.mjs'))
                return;
            return code.replace('class ErrorOverlay', ErrorOverlay.toString() + '\nclass ViteErrorOverlay');
        },
    };
}
