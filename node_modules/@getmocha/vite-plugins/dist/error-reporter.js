export function errorReporter(_env) {
    return {
        name: 'mocha-error-reporter',
        enforce: 'post',
        // See: https://vite.dev/guide/using-plugins#conditional-application
        apply: 'serve',
        // ref: https://vite.dev/guide/api-plugin.html#transformindexhtml
        transformIndexHtml(_html) {
            return [
                {
                    tag: 'script',
                    attrs: { type: 'module' },
                    injectTo: 'head',
                    children: `
          // Report any logs, errors, etc to the parent mocha app context to include in
          // the bottom panel.
          for (const method of ['log', 'debug', 'info', 'error', 'warn']) {
            const originalFn = console[method];
            console[method] = function(...args) {
              window.parent.postMessage({ type: 'console', method, args: args.map(a => \`\${a}\`) }, '*');
              return originalFn(...args);
            };
          }

          // Report any thrown errors / promise rejections so they show up in the logs
          window.addEventListener('error', (e) => {
            if (window.parent) {
              window.parent.postMessage({ type: 'error', stack: e.error.stack }, '*');
            }
          });
          window.addEventListener('unhandledrejection', (e) => {
            if (window.parent) {
              window.parent.postMessage({ type: 'unhandledrejection', reason: e.reason }, '*');
            }
          });

          // Report URL change event from iframe
          const originalPushState = history.pushState;
          const originalReplaceState = history.replaceState;

          const notifyParent = () => {
            window.parent.postMessage({ type: 'iframe_url_changed', url: window.location.href }, '*');
          };

          history.pushState = function (...args) {
            originalPushState.apply(this, args);
            notifyParent();
          };

          history.replaceState = function (...args) {
            originalReplaceState.apply(this, args);
            notifyParent();
          };

          window.addEventListener('popstate', notifyParent);
          window.addEventListener('hashchange', notifyParent);

          // Report any vite-hmr errors up to the parent mocha app context
          // Full event list: https://vite.dev/guide/api-hmr.html
          if (import.meta.hot) {
            console.log("HMR is enabled");

            import.meta.hot.on('vite:error', (data) => {
              console.log("vite:error", data);
              if (window.parent) {
                window.parent.postMessage({ type: 'vite:hmr:error', data }, '*');
              }
            });
            import.meta.hot.on('vite:beforeUpdate', (data) => {
              console.log("vite:beforeUpdate", data);
              if (window.parent) {
                window.parent.postMessage({ type: 'vite:hmr:beforeUpdate', data }, '*');
              }
            });
            import.meta.hot.on('vite:afterUpdate', (data) => {
              console.log("vite:afterUpdate", data);
              if (window.parent) {
                window.parent.postMessage({ type: 'vite:hmr:afterUpdate', data }, '*');
              }
            });
          }
        `,
                },
            ];
        },
    };
}
